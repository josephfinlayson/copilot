'use strict';

var gulp = require('gulp');
var plugins = require('gulp-load-plugins')();
var rimraf = require('rimraf');
var browserSync = require('browser-sync');
var runSequence = require('run-sequence');

var onError = function (err) {
  console.log(err);
};

// DEVELOPMENT TASKS
//================================================

/*
* 1. Setup a webserver with livereload using BrowserSync
* 2. JS and CSS get processed and served from the 'build' folder
* 3. JSX: Transform jsx React files and put in build 'build' folder
* 4. Compile sass files, autoprefix and put in 'build' folder
* */

 // BrowserSync Server
gulp.task('browser-sync', function() {
  browserSync.init([
    './build/css/*.css',
    './build/js/**/*.js',
    './**/*.html',
    '!node_modules/**',
    '!jspm_packages/**'

  ],
  {
    notify: false,
    server: {
      baseDir: ['./']
    },
    port: 3500,
    browser: [],
    tunnel: false
  });
});

// JSX
gulp.task('jsx', function() {

  return gulp.src('src/**/*.js')
      .pipe(plugins.plumber({
        errorHandler: onError
      }))
      .pipe(plugins.cached('jsx'))  //Process only changed files

      .pipe(plugins.react())

    .pipe(gulp.dest('build/'));
});

// Sass
gulp.task('sass', function() {
  return gulp.src('./src/sass/main.scss')
    .pipe(plugins.sourcemaps.init())
    .pipe(plugins.sass())
    .pipe(plugins.sourcemaps.write({includeContent: false}))
    .pipe(plugins.sourcemaps.init({loadMaps: true})) // Load sourcemaps generated by sass
    .pipe(plugins.autoprefixer({
      browsers: ['last 2 versions']
    }))
    .on('error', plugins.util.log)
    .pipe(plugins.sourcemaps.write('.'))
    .pipe(gulp.dest('./build/css'))
    .on('error', plugins.util.log);
});

// serve task
gulp.task('serve', ['browser-sync', 'jsx', 'sass', 'img'] , function(cb) {

  plugins.watch(
    './src/sass/**/*.scss',
    {
      name: 'SASS'
    },
    function() {
      gulp.start('sass');
    }
  );


  plugins.watch(
    './src/img/**',
    {
      name: 'img'
    },
    function() {
      gulp.start('img');
    }
  );

  plugins.watch(
    './src/js/**/*.js',
    {
      name: 'JS'
    },
    function() {
      gulp.start('jsx');
    }
  ).pipe(plugins.plumber({
        errorHandler: onError
      }))
});

// Delete build Directory
gulp.task('delete-build', function() {
  rimraf('./build', function(err) {
    plugins.util.log(err);
  });
});

//build (no server)
gulp.task('build', ['jsx', 'sass']);



gulp.task('cleanCordova', function(){
  return rimraf('./cordova/www/**', function(err) {
    plugins.util.log(err);
  });
});



gulp.task('deployAndroid', ['cordova', 'cleanCordova'], plugins.shell.task([
  'cd cordova; cordova run android'
]));


gulp.task('deployIOS', ['cordova', 'cleanCordova'], plugins.shell.task([
  'cd cordova; cordova run ios'
]));


gulp.task('cordova', ['bundle', 'sass'], function(){

  gulp.src('./index.html')
      .pipe(gulp.dest('cordova/www'))

  gulp.src('src/img/**')
      .pipe(gulp.dest('cordova/www/build/img'))


  gulp.src('build/css/**')
      .pipe(gulp.dest('cordova/www/build/css'))


  //gulp.src('node_modules/**')
  //    .pipe(gulp.dest('cordova/www/node_modules'))

  return gulp.src('dist/js/**')
      .pipe(gulp.dest('cordova/www/js'))

});

// Default
gulp.task('default', ['serve']);

// DISTRIBUTION TASKS
//===============================================

// Delete dist Directory
gulp.task('delete-dist', function() {
  rimraf('./dist', function(err) {
    plugins.util.log(err);
  });
});

// CSS
gulp.task('css', function() {
  return gulp.src('./build/css/main.css')
    .pipe(gulp.dest('./dist/css'))
    .pipe(plugins.csso())
    .pipe(plugins.rename('main.min.css'))
    .pipe(gulp.dest('./dist/css'))
    .on('error', plugins.util.log);
});

// img
gulp.task('img', function() {
  return gulp.src('./src/img/**')
    .pipe(gulp.dest('./build/img'))
});

// Copy index.html to 'dist'
gulp.task('html', function() {
  gulp.src(['./index.html'])
    .pipe(gulp.dest('./dist'))
    .on('error', plugins.util.log);
});

// Bundle with jspm

// Bundle with jspm
gulp.task('bundle', ['jsx'], plugins.shell.task([
  'jspm bundle-sfx build/js/main dist/js/app.js --production'
]));

// Uglify the bundle
gulp.task('uglify', function() {
  return gulp.src('./dist/js/app.js')
    .pipe(plugins.sourcemaps.init({loadMaps: true}))
    .pipe(plugins.uglify())
    .pipe(plugins.sourcemaps.write('.'))
    .pipe(plugins.rename('app.min.js'))
    .pipe(gulp.dest('./dist/js'))
    .on('error', plugins.util.log);
});

gulp.task('dist', function() {
  runSequence(
    'delete-dist',
    'build',
    ['css', 'html', 'bundle'],
    'uglify'
  );
});
